<%- include('layouts/head.ejs') %>

<link rel="stylesheet" href="css\post.css">
<link rel="stylesheet" href="css\start.css">
<link rel="stylesheet" href="css\blog.css">
<link rel="stylesheet" href="css\fullblog.css">
<link rel="stylesheet" href="css\team.css">

<div class="fullblogcontainer" hidden onclick="togglepostoff()">
  <a onclick="togglepostoff()"> <i class="fas fa-times"></i> </a>
  <div class="fullblog">
    <header class="blog-header">
      <div class="blog-header user  flex-auto-ns">
        <a href="/glebich"><img class="photo" src="https://static.dribbble.com/users/32512/avatars/normal/b394be60a32a4c82f89c73b0349af025.png?1556087466"></a>
        <div class="blog-details">
          <h1 class="blog-title">The secret ingredient of Data structures and algorithms </h1>
          <h2 class="blog-byline">
            <span class="attribution">
              <span class="blog-byline-user">
                by <a class="url hoverable blog-hoverable" rel="contact" href="/glebich">Gleb Kuznetsov</a>
              </span>
            </span>
          </h2>
        </div>
      </div>
    </header>
    <section>
      <div class="postimage">
        <img src="img/mountains.jpg" alt="">
      </div>
    </section>
    <section>
      <div class="blogbody">
        <p>
          Data structures serve as the basis for abstract data types (ADT). The ADT defines the logical form of the data type.
          The data structure implements the physical form of the data type.<br>

          Different types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, relational databases commonly use B-tree indexes for data retrieval while compiler
          implementations usually use hash tables to look up identifiers.<br>

          Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms. Some formal design
          methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both main memory
          and secondary memory.<br><br>

        <h3>Implementation</h3><br>
        Data structures are generally based on the ability of a computer to fetch and store data at any place in its memory, specified by a pointerâ€”a bit string, representing a memory address, that can be itself stored in memory and manipulated by
        the program. Thus, the array and record data structures are based on computing the addresses of data items with arithmetic operations, while the linked data structures are based on storing addresses of data items within the structure itself.
        <br><br>

        The implementation of a data structure usually requires writing a set of procedures that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This
        observation motivates the theoretical concept of an abstract data type, a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and
        time cost)<br><br>

        <h3>Examples</h3><br>
        There are numerous types of data structures, generally built upon simpler primitive data types:
        <br>br'
        An array is a number of elements in a specific order, typically all of the same type (depending on the language, individual elements may either all be forced to be the same type, or may be of almost any type). Elements are accessed using an
        integer index to specify which element is required. Typical implementations allocate contiguous memory words for the elements of arrays (but this is not always a necessity). Arrays may be fixed-length or resizable.
        <br><br>A linked list (also just called list) is a linear collection of data elements of any type, called nodes, where each node has itself a value, and points to the next node in the linked list. The principal advantage of a linked list over
        an
        array is that values can always be efficiently inserted and removed without relocating the rest of the list. Certain other operations, such as random access to a certain element, are however slower on lists than on arrays.
        A record (also called tuple or struct) is an aggregate data structure. A record is a value that contains other values, typically in fixed number and sequence and typically indexed by names. The elements of records are usually called fields or
        members.<br><br>
        </p>
      </div>
    </section>
  </div>
</div>

<div id="content">
  <div class="container">
    <header class=" header3">
      <div class="brand-box">
        <span class="brand">Students Senate</span>
      </div>
      <div class="text-box">
        <h1 class="qwer" style="font-weight: 700">Simply the best</h1>
        <p style="color: white;">Reasons for choosing us</p>
      </div>
    </header>

    <div class="view">
      <div class="sidecontainer">
        <div class="notification-container">
          <div class="notf-title">
            <span>Notifications</span>
          </div>
          <div class="notifications">
            <div class="notification">
              <i class="fas fa-envelope"></i>
              <span>Please confirm your email</span>
            </div>
            <div class="notification">
              <i class="fas fa-book"></i>
              <span>Checkout our library page</span>
            </div>
            <div class="notification">
              <i class="fab fa-github"></i>
              <span>Follow us on github</span>
            </div>
            <div class="notification">
              <i class="fas fa-user"></i>
              <span>Someone followed you</span>
            </div>
          </div>
        </div>
        <div class="popular-post-container">
          <div class="post-container-title">
            <span>Popular posts</span>
          </div>
          <div class="popular-posts">
            <div class="popular-post">
              <img src="img/tower2.jpg">
              <span>Two Fishes were caught doing something fishy</span>
            </div>
            <div class="popular-post">
              <img src="img/tower2.jpg">
              <span>This post can save your life</span>
            </div>
            <div class="popular-post">
              <img src="img/tower2.jpg">
              <span>Jai shree ram, Ye post seedha ayodhya se aaya hai</span>
            </div>
            <div class="popular-post">
              <img src="img/tower2.jpg">
              <span>Bhula dena mujhe hai alvida tujhe, tujhe jeena ...</span>
            </div>
          </div>
        </div>
      </div>

      <div class="boy">
        <div class="post-navigator">
          <div class="options">
            <span>Formal</span>
            <span>Informal</span>
            <span>Promotion</span>
          </div>
          <div class="post-nav-slider"></div>
        </div>

        <%posts.map((post,i)=>{%>
        <%if(i&1^1){%>
        <div class="row">
          <%}%>
          <div class="column">
            <div class="card" style="background:linear-gradient(rgba(0, 0, 0, .5), rgba(0, 0, 0, .5)), url('/img/tabitha-turner-qtr0Lw4fMGc-unsplash.jpg')  center / cover no-repeat;">
              <div class="header4">
                <div class="date">
                  <span>12 Aug 2020</span>
                </div>
              </div>
              <div class="data">
                <div class="content">
                  <span class="author"> <%=post.author%> </span>
          <h1 class="title"><a onclick="togglepost()"> <%=post.title%> </a></h1>
          <p class="text"> <%=post.body%> </p>
          <a href="/delete/<%=post._id%>" class="but2">Read more</a>
        </div>
      </div>
    </div>
  </div>
  <%if(i&1){%>
</div>
<%}%>
<%})%>

</div>
</div>
</div>
<script type="text/javascript">
  function togglepost() {
    var fullblog = document.getElementsByClassName('fullblogcontainer')[0]
    fullblog.hidden = false;
  }

  function togglepostoff() {
    var fullblog = document.getElementsByClassName('fullblogcontainer')[0]
    fullblog.hidden = true;
  }
</script>
</div>
<%- include('layouts/foot.ejs') %>
